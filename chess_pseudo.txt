Helpers:

# Adds/Multiplies to values in array to make them fit to board
def fit_to_board(arr)
  [ (arr[0] + 1), ((arr[1] * 2) + 1) ]
end

# Checks if values in str are in board
def str_in_board?(str)
  ('A'..'G').include?(str.chars[0]) && (1..8).include?(str.chars[1].to_i)
end

# Checks if values in arr are in board
def arr_in_board?(arr)
  arr.select{ |n| (1..8).include?(n) }.size == 2
end

# Checks if value is in board
def in_board?(obj)
  obj.class == String ? str_in_board?(obj) : arr_in_board?(obj)
end

# Converts a string to a usable array
def convert_str(str)
  [ str.chars[1].to_i, (('A'..'G').to_a.index(str.chars[0]) + 1) ]
end

# Returns the object on the board
def chessboard_index(row, col)
  @board[row][col]
end

# Checks to see if full input is in the desired format
def correct_format?(str)
  str.size==5 && str.split.size==2 && 2.times{|n| in_board?(str.split[n-1])}
end

# Converts the full input into a multi-layered array
def convert_input(str)
  if correct_format?(str)
    return [convert_str(str.split[0]), convert_str(str.split[1])]
  else
    return 'invalid'
  end
end
